<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.coding404.myweb.product.ProductMapper">

    <insert id="productInsert" parameterType="ProductVO">
        INSERT INTO PRODUCT(PROD_ENDDATE
        ,PROD_CATEGORY
        ,PROD_WRITER
        ,PROD_NAME
        ,PROD_PRICE
        ,PROD_COUNT
        ,PROD_DISCOUNT
        ,PROD_PURCHASE_YN
        ,PROD_CONTENT
        ,PROD_COMMENT
        )
        VALUES (
        #{prodEnddate}
        ,#{prodCategory}
        ,#{prodWriter}
        ,#{prodName}
        ,#{prodPrice}
        ,#{prodCount}
        ,#{prodDiscount}
        ,#{prodPurchaseYn}
        ,#{prodContent}
        ,#{prodComment}
        )
    </insert>

    <!-- 목록을 조회한다 -->
    <!-- 동적쿼리 test구문에는 vo의 getter나 map의 key값이 사용가능합니다. -->
    <!-- <![CDATA[]]> 는 순수한 문자열로 인식시킴 -->
    <select id="getList" resultType="ProductVO">
        <![CDATA[
        SELECT *
        FROM PRODUCT P
        LEFT JOIN (
            SELECT CONCAT(A1.group_ID, A1.CATEGORY_ID) AS CATEGORY_KEY, ##카테고리 키 (그룹 + 키 형태로 카테고리분류)
            CASE A1.category_parent_LV
            WHEN 0 THEN A1.category_detail_NM
            WHEN 1 THEN CONCAT(A2.category_detail_NM,' > ', A1.category_detail_NM)
            WHEN 2 THEN CONCAT(A3.category_detail_NM, ' > ', A2.category_detail_NM,' > ', A1.category_detail_NM)
            END as CATEGORY_NAV
            FROM PRODUCT_CATEGORY A1
            LEFT OUTER JOIN PRODUCT_CATEGORY A2
            ON A1.CATEGORY_PARENT_LV = A2.CATEGORY_LV AND A1.CATEGORY_DETAIL_PARENT_LV = A2.CATEGORY_DETAIL_LV AND A1.GROUP_ID = A2.GROUP_ID
            LEFT OUTER JOIN PRODUCT_CATEGORY A3
            ON A2.CATEGORY_PARENT_LV = A3.CATEGORY_LV AND A2.CATEGORY_DETAIL_PARENT_LV = A3.CATEGORY_DETAIL_LV
            ORDER BY CATEGORY_NAV ASC
        ) C
        ON P.PROD_CATEGORY = C.CATEGORY_KEY
        WHERE PROD_WRITER = #{userId}
        ]]>
        <if test="cri.searchName != '' and cri.searchName != null ">
            AND PROD_NAME LIKE CONCAT('%', #{cri.searchName}, '%')
        </if>
        <if test="cri.searchContent != '' and cri.searchContent != null ">
            AND PROD_CONTENT LIKE CONCAT('%', #{cri.searchContent}, '%')
        </if>
        <if test="cri.startDate != '' and cri.startDate != null ">
            <![CDATA[ AND PROD_ENDDATE >= #{cri.startDate} ]]>
        </if>
        <if test="cri.endDate != '' and cri.endDate != null ">
            <![CDATA[ AND PROD_ENDDATE <= #{cri.endDate} ]]>
        </if>
        ORDER BY
        <if test="cri.searchPrice == 'asc' ">
            PROD_PRICE ASC,
        </if>
        <if test="cri.searchPrice == 'desc' ">
            PROD_PRICE DESC,
        </if>
        PROD_ID DESC
        LIMIT #{ cri.pageStart}, #{ cri.amount}
    </select>

    <select id="getTotal" resultType="int">
        SELECT COUNT(*) AS TOTAL
        FROM PRODUCT
        WHERE PROD_WRITER = #{userId}
        <if test="cri.searchName != '' and cri.searchName != null ">
            AND PROD_NAME LIKE CONCAT('%', #{cri.searchName}, '%')
        </if>
        <if test="cri.searchContent != '' and cri.searchContent != null ">
            AND PROD_CONTENT LIKE CONCAT('%', #{cri.searchContent}, '%')
        </if>
        <if test="cri.startDate != '' and cri.startDate != null ">
            <![CDATA[ AND PROD_ENDDATE >= #{cri.startDate} ]]>
        </if>
        <if test="cri.endDate != '' and cri.endDate != null ">
            <![CDATA[ AND PROD_ENDDATE <= #{cri.endDate} ]]>
        </if>
    </select>

    <!--상세내역을 조회한다-->
    <select id="getDetail" resultType="ProductVO">
        SELECT *
        FROM PRODUCT P
        LEFT JOIN (
        SELECT CONCAT(A1.group_ID, A1.CATEGORY_ID) AS CATEGORY_KEY, ##카테고리 키 (그룹 + 키 형태로 카테고리분류)
        CASE A1.category_parent_LV
        WHEN 0 THEN A1.category_detail_NM
        WHEN 1 THEN CONCAT(A2.category_detail_NM,' > ', A1.category_detail_NM)
        WHEN 2 THEN CONCAT(A3.category_detail_NM, ' > ', A2.category_detail_NM,' > ', A1.category_detail_NM)
        END as CATEGORY_NAV
        FROM PRODUCT_CATEGORY A1
        LEFT OUTER JOIN PRODUCT_CATEGORY A2
        ON A1.CATEGORY_PARENT_LV = A2.CATEGORY_LV AND A1.CATEGORY_DETAIL_PARENT_LV = A2.CATEGORY_DETAIL_LV AND A1.GROUP_ID = A2.GROUP_ID
        LEFT OUTER JOIN PRODUCT_CATEGORY A3
        ON A2.CATEGORY_PARENT_LV = A3.CATEGORY_LV AND A2.CATEGORY_DETAIL_PARENT_LV = A3.CATEGORY_DETAIL_LV
        ORDER BY CATEGORY_NAV ASC
        ) C
        ON P.PROD_CATEGORY = C.CATEGORY_KEY
        WHERE PROD_ID = #{prodId}
    </select>


    <update id="productUpdate" parameterType="ProductVO">
        UPDATE PRODUCT
        SET
        PROD_ENDDATE = #{prodEnddate}
        ,PROD_NAME = #{prodName}
        ,PROD_PRICE = #{prodPrice}
        ,PROD_COUNT = #{prodCount}
        ,PROD_DISCOUNT = #{prodDiscount}
        ,PROD_PURCHASE_YN = #{prodPurchaseYn}
        ,PROD_CONTENT = #{prodContent}
        ,PROD_COMMENT = #{prodComment}
        WHERE PROD_ID = #{prodId}
    </update>

    <!--삭제 기능 -->
    <delete id="productDelete" parameterType="int">
        DELETE FROM PRODUCT WHERE PROD_ID = #{prodId}
    </delete>


    <!-- 카테고리 1단계를 조회한다 -->
    <select id="getCategory" resultType="CategoryVO">
        SELECT *
        FROM PRODUCT_CATEGORY
        WHERE CATEGORY_LV = 1
    </select>

    <!--카테고리 2단계, 3단계를 조회한다-->
    <!-- PARENT_LV = 상위카테고리LV -->
    <select id="getCategoryChild" resultType="CategoryVO">
        SELECT *
        FROM PRODUCT_CATEGORY
        WHERE GROUP_ID = #{groupId}
        AND CATEGORY_PARENT_LV = #{categoryLv}
        AND CATEGORY_DETAIL_PARENT_LV = #{categoryDetailLv}
    </select>

    <!-- 파일을 인서트 합니다 (상품 등록과 함께 등록됩니다.) -->
    <!--
        파일 인서트 전에 product테이블의 prod_id값을 조회하여 가지고 와서 fk로 저장해야 합니다.
        selectKey태그는 특정 테이블을 조회해서, 조회한 결과를 vo에 대신 담아 줍니다.

        order속성은 sql문 실행 (이후, 이전) 결정 하는 속성
        resultType속성은 실행될 sql의 반환타입
        keyProperty속성은 vo의 어느 컬럼에 저장 할 것인가
    -->
    <insert id="uploadFile" parameterType="ProductUploadVO">
        <selectKey order="BEFORE" resultType="int" keyProperty="prodId">
            SELECT MAX(PROD_ID) FROM PRODUCT WHERE PROD_WRITER = #{prodWriter}
        </selectKey>

        INSERT INTO PRODUCT_UPLOAD (
        FILENAME,
        FILEPATH,
        UUID,
        PROD_ID,
        PROD_WRITER
        )
        VALUES (
        #{filename},
        #{filepath},
        #{uuid},
        #{prodId},
        #{prodWriter}
        )
    </insert>


</mapper>
